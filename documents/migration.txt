To create a migration, use the make:migration Artisan command:

		php artisan make:migration create_users_table

The new migration will be placed in your database/migrations directory. Each migration file name contains a timestamp which allows Laravel to determine the order of the migrations.

A migration class contains two methods: up and down. The up method is used to add new tables, columns, or indexes to your database, while the down method should simply reverse the operations performed by the up method.

A file is created in database/migrations folder. Type In the UP()

		public function up()
	    {
	        Schema::table('users', function(Blueprint $table) {
		        $table->dropColumn('name');
		        $table->string('first_name')->after('id');
		        $table->string('last_name')->after('first_name');
		    });
	    }

To run all outstanding migrations for your application, use the migrate Artisan command. If you are using the Homestead virtual machine, you should run this command from within your VM:

		php artisan migrate

If you receive a "class not found" error when running migrations, try running the composer dump-autoload command and re-issuing the migrate command.

To rollback the latest migration "operation", you may use the rollback command. Note that this rolls back the last "batch" of migrations that ran, which may include multiple migration files:

		php artisan migrate:rollback

The migrate:reset command will roll back all of your application's migrations:

		php artisan migrate:reset

The migrate:refresh command will first roll back all of your database migrations, and then run the migrate command. This command effectively re-creates your entire database:

		php artisan migrate:refresh

		php artisan migrate:refresh --seed

To rename an existing database table, use the rename method:

		Schema::rename($from, $to);

To drop an existing table, you may use the drop or dropIfExists methods:

		Schema::drop('users');

		Schema::dropIfExists('users');

Of course, the schema builder contains a variety of column types that you may use when building your tables:

		$table->bigIncrements('id'); 		
		Incrementing ID (primary key) using a "UNSIGNED BIG INTEGER" equivalent.

		$table->bigInteger('votes'); 		
		BIGINT equivalent for the database.

		$table->binary('data'); 		
		BLOB equivalent for the database.

		$table->boolean('confirmed'); 	
		BOOLEAN equivalent for the database.

		$table->char('name', 4); 		
		CHAR equivalent with a length.

		$table->date('created_at'); 	
		DATE equivalent for the database.

		$table->dateTime('created_at'); 	
		DATETIME equivalent for the database.

		$table->decimal('amount', 5, 2); 	
		DECIMAL equivalent with a precision and scale.

		$table->double('column', 15, 8); 	
		DOUBLE equivalent with precision, 15 digits in total and 8 after the decimal point.

		$table->enum('choices', ['foo', 'bar']); 	
		ENUM equivalent for the database.

		$table->float('amount'); 	
		FLOAT equivalent for the database.

		$table->increments('id'); 	
		Incrementing ID (primary key) using a "UNSIGNED INTEGER" equivalent.

		$table->integer('votes'); 	
		INTEGER equivalent for the database.

		$table->json('options'); 	
		JSON equivalent for the database.

		$table->jsonb('options'); 	
		JSONB equivalent for the database.

		$table->longText('description'); 	
		LONGTEXT equivalent for the database.

		$table->mediumInteger('numbers'); 	
		MEDIUMINT equivalent for the database.

		$table->mediumText('description'); 	
		MEDIUMTEXT equivalent for the database.

		$table->morphs('taggable'); 	
		Adds INTEGER taggable_id and STRING taggable_type.

		$table->nullableTimestamps(); 	
		Same as timestamps(), except allows NULLs.

		$table->rememberToken(); 	
		Adds remember_token as VARCHAR(100) NULL.

		$table->smallInteger('votes'); 	
		SMALLINT equivalent for the database.

		$table->softDeletes(); 	
		Adds deleted_at column for soft deletes.

		$table->string('email'); 	
		VARCHAR equivalent column.

		$table->string('name', 100); 	
		VARCHAR equivalent with a length.

		$table->text('description'); 	
		TEXT equivalent for the database.

		$table->time('sunrise'); 	
		TIME equivalent for the database.

		$table->tinyInteger('numbers'); 	
		TINYINT equivalent for the database.

		$table->timestamp('added_on'); 	
		TIMESTAMP equivalent for the database.

		$table->timestamps(); 	
		Adds created_at and updated_at columns.

		$table->uuid('id'); 	
		UUID equivalent for the database.

In addition to the column types listed above, there are several other column "modifiers" which you may use while adding the column. For example, to make the column "nullable", you may use the nullable method:

		$table->string('email')->first() 	
		Place the column "first" in the table (MySQL Only)

		$table->string('email')->after('column') 	
		Place the column "after" another column (MySQL Only)

		$table->string('email')->nullable() 	
		Allow NULL values to be inserted into the column

		$table->string('email')->default($value) 	
		Specify a "default" value for the column

		$table->string('email')->unsigned() 	
		Set integer columns to UNSIGNED

The change method allows you to modify an existing column to a new type, or modify the column's attributes. For example, you may wish to increase the size of a string column. To see the change method in action, let's increase the size of the name column from 25 to 50:

		$table->string('name', 50)->change();

Available Index Types

		$table->primary('id'); 	
		Add a primary key.
		
		$table->primary(['first', 'last']); 	
		Add composite keys.
		
		$table->unique('email'); 	
		Add a unique index.
		
		$table->index('state'); 	
		Add a basic index.