The focus of the tutorial will be on how we can generate JWTs on the Laravel side, obtain them on the front-end and then send them along with every request to the API.
We’ll be using a couple open source packages for this application: jwt-auth for creating JWTs on the Laravel side and Satellizer for handling the AngularJS authentication logic.

		laravel new jot-bot
		php artisan key:generate
		cd jot-bot
		php artisan serve

If everything is working you should see the Laravel welcome page.

Now that the core Laravel files are installed, let’s install jwt-auth. Open composer.json and update the require object to include jwt-auth:

		// composer.json
		"require": {
		       "php": ">=5.5.9",
		       "laravel/framework": "5.1.*",
		       "tymon/jwt-auth": "0.5.*"
		   },
   
Next, let’s bring this package in by running an update. From the command line:

		composer update

We’ll now need to update the providers array in config/app.php with the jwt-auth provider. Open up config/app.php, find the providers array located on line 111 and add this to it:

		Tymon\JWTAuth\Providers\JWTAuthServiceProvider::class

We should also add in the jwt-auth facades which we can do in config/app.php. Find the aliases array and add these facades to it:

		'JWTAuth'   => Tymon\JWTAuth\Facades\JWTAuth::class,
		'JWTFactory' => Tymon\JWTAuth\Facades\JWTFactory::class


We also need to publish the assets for this package. From the command line:

		php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\JWTAuthServiceProvider"

After you run this command you will see a new file in the config folder called jwt.php. This file contains settings for jwt-auth, one of which we need to change right away. We need to generate a secret key which we can do from the command line:

		php artisan jwt:generate

We’ve got everything installed on the Laravel side—now let’s take care of the AngularJS dependencies.

There are a number of things that need to happen on the front-end so that we can send a JWT with every request to the Laravel API after our user is authenticated. Namely, we need to keep the JWT in local storage once we retrieve it from the API and also need to add a header to every subsequent request that contains the token. We could write the appropriate JavaScript to accomplish this on our own, but a package has already been created that does a great job of it. Instead of spending extra effort, let’s make use of Satellizer.

Let’s use npm to install our front-end dependencies. From the command line:

		cd public
		sudo chmod 777 -R /home/yuvraj/tmp
		npm install angular satellizer angular-ui-router bootstrap

Creating Some Test Data

Laravel comes with a migration for a users table out of the box and this is the only one we’ll need for the tutorial. Let’s run the migrations so that this table gets created in the database and then seed it with some test data. From the command line:

		php artisan migrate

For seeding, we’ll put the array of users and the logic to insert them into the database right within DatabaseSeeder.php, but you can also create a separate seeder file and call it from that file if you like.

		// database/seeds/DatabaseSeeder.php
		<?php
		use Illuminate\Database\Seeder;
		use Illuminate\Database\Eloquent\Model;
		use App\User;
		class DatabaseSeeder extends Seeder
		{
		    public function run()
		    {
		        Model::unguard();
		        DB::table('users')->delete();
		        $users = array(
		                ['name' => 'Ryan Chenkie', 'email' => 'ryanchenkie@gmail.com', 'password' => Hash::make('secret')],
		                ['name' => 'Chris Sevilleja', 'email' => 'chris@scotch.io', 'password' => Hash::make('secret')],
		                ['name' => 'Holly Lloyd', 'email' => 'holly@scotch.io', 'password' => Hash::make('secret')],
		                ['name' => 'Adnan Kukic', 'email' => 'adnan@scotch.io', 'password' => Hash::make('secret')],
		        );
		        // Loop through each user above and create the record for them in the database
		        foreach ($users as $user)
		        {
		            User::create($user);
		        }
		        Model::reguard();
		    }
		}

In this seeder we are creating an array of users and then looping through them to add them to the database. This file relies on us using App\User which is the User model that also ships with Laravel. As we loop through the users we call create on each to add that record to the database. With this in place, we just need to run the seeder.

		php artisan db:seed

To generate a new seeder type :

		php artisan make:seeder UsersTableSeeder

A seeder class only contains one method by default: run. This method is called when the db:seed Artisan command is executed.

Within the DatabaseSeeder class, you may use the call method to execute additional seed classes. Using the call method allows you to break up your database seeding into multiple files so that no single seeder class becomes overwhelmingly large. Simply pass the name of the seeder class you wish to run:

		/**
		 * Run the database seeds.
		 *
		 * @return void
		 */
		public function run()
		{
		    Model::unguard();

		    $this->call(UsersTableSeeder::class);
		    $this->call(PostsTableSeeder::class);
		    $this->call(CommentsTableSeeder::class);

		    Model::reguard();
		}

By default, the db:seed command runs the DatabaseSeeder class, which may be used to call other seed classes. However, you may use the --class option to specify a specific seeder class to run individually:

		php artisan db:seed

		php artisan db:seed --class=UsersTableSeeder

You may also seed your database using the migrate:refresh command, which will also rollback and re-run all of your migrations. This command is useful for completely re-building your database:

		php artisan migrate:refresh --seed

